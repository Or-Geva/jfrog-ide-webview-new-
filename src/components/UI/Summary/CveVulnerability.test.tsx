import { render } from '@testing-library/react'
import CveVulnerability from './CveVulnerability'
import { IDependencyPage, PageType } from '../../../model/webviewPages'
import { ISeverity } from '../../../model/severity'
describe('CveVulnerability component', () => {
	test('renders CveVulnerability component', () => {
		const data2: IDependencyPage = {
			id: '123',
			pageType: PageType.Dependency,
			componentType: 'Maven',
			severity: ISeverity.Low,
			component: 'example-component',
			version: '1.2.3',
			cve: {
				id: 'a',
				applicableData: {
					isApplicable: true
				},
				cvssV3Score: '7.5'
			},
			impactGraph: {},
			edited: '',
			license: [{ name: 'MIT' }],
			watchName: ['watch1', 'watch2'],
			fixedVersion: ['1.0.0'],
			extendedInformation: {
				shortDescription: '',
				fullDescription: '',
				jfrogResearchSeverity: ISeverity.High
			}
		} as IDependencyPage

		const { getByText } = render(<CveVulnerability data={data2} />)

		const componentElement = getByText('Component:')
		expect(componentElement).toBeInTheDocument()

		const severityElement = getByText('Severity:')
		expect(severityElement).toBeInTheDocument()

		const jfrogSeverityElement = getByText('JFrog severity:')
		expect(jfrogSeverityElement).toBeInTheDocument()

		const cvssScoreElement = getByText('CVSS score:')
		expect(cvssScoreElement).toBeInTheDocument()

		const licenseElement = getByText('License:')
		expect(licenseElement).toBeInTheDocument()

		const watchElement = getByText('Watch:')
		expect(watchElement).toBeInTheDocument()

		const fixedVersionElement = getByText('Fixed version:')
		expect(fixedVersionElement).toBeInTheDocument()

		const versionElement = getByText('Version:')
		expect(versionElement).toBeInTheDocument()

		const typeElement = getByText('Type:')
		expect(typeElement).toBeInTheDocument()

		const idElement = getByText('ID:')
		expect(idElement).toBeInTheDocument()
	})
})
